package {{invokerPackage}};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

@ComponentScan
@Configuration
@EnableAutoConfiguration
@PropertySource(value = {"classpath:/appInfo.properties"}, ignoreResourceNotFound = true)
public class Application {

  private static final Logger log = LoggerFactory.getLogger(Application.class);

  @Inject
  private Environment env;

  /**
   * Main method, used to run the application.
   */
  public static void main(String[] args) throws UnknownHostException {
    SpringApplication app = new SpringApplication(Application.class);
    Environment env = app.run(args).getEnvironment();
    log.info(
        "\n----------------------------------------------------------\n\t"
            + "App artifact: \t{}\n\t" + "Build version: \t{}\n\t" + "Environment: \t{}\n\t"
            + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}"
            + "\n----------------------------------------------------------",
        env.getProperty("info.build.artifact"), env.getProperty("info.build.version"),
        Arrays.toString(env.getActiveProfiles()), env.getProperty("server.port"),
        InetAddress.getLocalHost().getHostAddress(), env.getProperty("server.port"));
  }


  /**
   * <p/>
   * Spring profiles can be configured with a program arguments
   * --spring.profiles.active=your-active-profile
   * <p/>
   */
  @PostConstruct
  public void initApplication() throws IOException {
    if (env.getActiveProfiles().length == 0) {
      log.warn("No Spring profile configured, running with default configuration");
    } else {
      log.info("Running with Spring profile(s) : {}", Arrays.toString(env.getActiveProfiles()));
    }
  }
}
